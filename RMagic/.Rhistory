shiny::runApp() shiny::runApp() shiny::runApp() shiny::runApp() library(rsconnect) deployApp() deployApp() require(shiny) require(plyr) require(httr) require(rjson)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
require(shiny)
require(plyr)
require(httr)
require(rjson)
###################### private KEYS, need to be added
visionKey = '10067d8757b4412a934512ae19094a54' faceKEY = '47807be061144e95b101a38878fdbd36' emotionKey = '659a857702144dda9e0b63b3b2fd5a0f' videoKey = '8b058ea3a34246c397a8971a726f7d14'
############################################ helper!
dataframeFromJSON <- function(l) {
  l1 <- lapply(l, function(x) {
    x[sapply(x, is.null)] <- NA
    unlist(x)
  })
  keys <- unique(unlist(lapply(l1, names)))
  l2 <- lapply(l1, '[', keys)
  l3 <- lapply(l2, setNames, keys)
  res <- data.frame(do.call(rbind, l3))
  return(res)
}
################################################
#### URL based!
############################################################
getFaceResponseURL <- function(img.url, key){
  faceURL = "https://api.projectoxford.ai/face/v1.0/detect?returnFaceId=true&returnFaceAttributes=age,gender,smile,facialHair,headPose"
  mybody = list(url = img.url)
  faceResponse = POST(
    url = faceURL, 
    content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = key)),
    body = mybody,
    encode = 'json'
  )
  con <- content(faceResponse)[[1]]
  #df <- data.frame(t(unlist(con$faceAttributes)))
  df <- dataframeFromJSON(content(faceResponse))
  # better <- dataframeFromJSON(content(faceResponse))
   cn <- c("faceId","faceAttributes.smile", "faceAttributes.gender", "faceAttributes.age", "faceAttributes.facialHair.moustache", "faceAttributes.facialHair.beard", "faceAttributes.facialHair.sideburns")
  # better[,cn]
  return(df[,cn]) 
}
##########################################################################  
getVisionResponseURL <- function(img.url, key){
  visionURL = "https://api.projectoxford.ai/vision/v1/analyses?visualFeatures=all"
  mybody = list(url = img.url)
  visionResponse = POST(
    url = visionURL, 
    content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = key)),
    body = mybody,
    encode = 'json'
  )
  con <- content(visionResponse)
  df <- data.frame(t(unlist(con$categories)))
  df2 <- data.frame(t(unlist(con$color)))
  better <- dataframeFromJSON(content(visionResponse))
  return(cbind(df,df2))
}
########################################################################## 
getEmotionResponseURL <- function(img.url, key){
  emotionURL = "https://api.projectoxford.ai/emotion/v1.0/recognize"
  mybody = list(url = img.url)
  emotionResponse = POST(
    url = emotionURL, 
    content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = key)),
    body = mybody,
    encode = 'json'
  )
  df <- dataframeFromJSON(content(emotionResponse))
  return(df)
}
########################################################################## ########################################################################## 
########################################################################## 
baseURL <- "http://i.telegraph.co.uk/multimedia/archive/01899/shriver-Schwarzene_1899483b.jpg"
df <- read.csv2("base.csv")
df <- df[,  c("faceId","faceAttributes.smile", "faceAttributes.gender", "faceAttributes.age", "faceAttributes.facialHair.moustache", "faceAttributes.facialHair.beard", "faceAttributes.facialHair.sideburns")]
shinyServer(function(input, output) {
  ntext <- eventReactive(input$goButton, {
    print(input$url)
    if (input$url == "http://") {
      baseURL
    } else {
      baseURL <<- input$url 
    }
  })
  getURL <- reactive({
    if (input$url == "http://") {
      baseURL
    } else {
      input$url
    }
  })
  output$image <- renderUI({
    url <- getURL()
    HTML(paste0('<img src="', url ,'" /> '))
  })
  ##########################################
  v <- reactiveValues(doPlot = FALSE)
  observeEvent(input$goButton, {
    # 0 will be coerced to FALSE
    # 1+ will be coerced to TRUE
    v$doPlot <- input$goButton
  })
  output$res <- renderTable({
    if (v$doPlot == FALSE) return()
    #print("go!")
    isolate({
     getFaceResponseURL(getURL(), faceKEY)
    })
  })
})
require(shiny)
require(plyr)
require(httr)
require(rjson)
###################### private KEYS, need to be added
visionKey = '10067d8757b4412a934512ae19094a54' faceKEY = '47807be061144e95b101a38878fdbd36' emotionKey = '659a857702144dda9e0b63b3b2fd5a0f' videoKey = '8b058ea3a34246c397a8971a726f7d14'
############################################ helper!
dataframeFromJSON <- function(l) {
  l1 <- lapply(l, function(x) {
    x[sapply(x, is.null)] <- NA
    unlist(x)
  })
  keys <- unique(unlist(lapply(l1, names)))
  l2 <- lapply(l1, '[', keys)
  l3 <- lapply(l2, setNames, keys)
  res <- data.frame(do.call(rbind, l3))
  return(res)
}
################################################
#### URL based!
############################################################
getFaceResponseURL <- function(img.url, key){
  faceURL = "https://api.projectoxford.ai/face/v1.0/detect?returnFaceId=true&returnFaceAttributes=age,gender,smile,facialHair,headPose"
  mybody = list(url = img.url)
  faceResponse = POST(
    url = faceURL, 
    content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = key)),
    body = mybody,
    encode = 'json'
  )
  con <- content(faceResponse)[[1]]
  #df <- data.frame(t(unlist(con$faceAttributes)))
  df <- dataframeFromJSON(content(faceResponse))
  # better <- dataframeFromJSON(content(faceResponse))
   cn <- c("faceId","faceAttributes.smile", "faceAttributes.gender", "faceAttributes.age", "faceAttributes.facialHair.moustache", "faceAttributes.facialHair.beard", "faceAttributes.facialHair.sideburns")
  # better[,cn]
  return(df[,cn]) 
}
##########################################################################  
getVisionResponseURL <- function(img.url, key){
  visionURL = "https://api.projectoxford.ai/vision/v1/analyses?visualFeatures=all"
  mybody = list(url = img.url)
  visionResponse = POST(
    url = visionURL, 
    content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = key)),
    body = mybody,
    encode = 'json'
  )
  con <- content(visionResponse)
  df <- data.frame(t(unlist(con$categories)))
  df2 <- data.frame(t(unlist(con$color)))
  better <- dataframeFromJSON(content(visionResponse))
  return(cbind(df,df2))
}
########################################################################## 
getEmotionResponseURL <- function(img.url, key){
  emotionURL = "https://api.projectoxford.ai/emotion/v1.0/recognize"
  mybody = list(url = img.url)
  emotionResponse = POST(
    url = emotionURL, 
    content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = key)),
    body = mybody,
    encode = 'json'
  )
  df <- dataframeFromJSON(content(emotionResponse))
  return(df)
}
########################################################################## ########################################################################## 
########################################################################## 
baseURL <- "http://i.telegraph.co.uk/multimedia/archive/01899/shriver-Schwarzene_1899483b.jpg"
df <- read.csv2("base.csv")
df <- df[,  c("faceId","faceAttributes.smile", "faceAttributes.gender", "faceAttributes.age", "faceAttributes.facialHair.moustache", "faceAttributes.facialHair.beard", "faceAttributes.facialHair.sideburns")]
shinyServer(function(input, output) {
  ntext <- eventReactive(input$goButton, {
    print(input$url)
    if (input$url == "http://") {
      baseURL
    } else {
      baseURL <<- input$url 
    }
  })
  getURL <- reactive({
    if (input$url == "http://") {
      baseURL
    } else {
      input$url
    }
  })
  output$image <- renderUI({
    url <- getURL()
    HTML(paste0('<img src="', url ,'" /> '))
  })
  ##########################################
  v <- reactiveValues(doPlot = FALSE)
  observeEvent(input$goButton, {
    # 0 will be coerced to FALSE
    # 1+ will be coerced to TRUE
    v$doPlot <- input$goButton
  })
  output$res <- renderTable({
    if (v$doPlot == FALSE) return()
    #print("go!")
    isolate({
     getFaceResponseURL(getURL(), faceKEY)
    })
  })
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny) runApp(system.file('shiny', package = 'knitr'))
library(shiny) runApp(system.file('shiny', package = 'knitr'))
library(slidify) author('mydeck') slidify('SlidifyDemo.Rmd')
slidify('SlidifyDemo.Rmd')
slidify('SlidifyDemo.Rmd')
library(ggplot2)  #devtools::install_github("hadley/ggplot2")  library(dplyr)     library(ggalt)    # devtools::install_github("hrbrmstr/ggalt") library(ggthemes) # theme_map and tableau colors world <- map_data("world") world <- world[world$region != "Antarctica",] # intercourse antarctica dat <- read.csv("CLIWOC15.csv")        # having factors here by default isn't a bad thing dat <- filter(dat, Nation != "Sweden") # I kinda feel bad for Sweden but 4 panels look better than 5 and it doesn't have much data gg <- ggplot() gg <- gg + geom_map(data=world, map=world,                     aes(x=long, y=lat, map_id=region),                     color="white", fill="#7f7f7f", size=0.05, alpha=1/4) gg <- gg + geom_point(data=dat,                        aes(x=Lon3, y=Lat3, color=Nation),                        size=0.15, alpha=1/100) gg <- gg + scale_color_tableau() gg <- gg + coord_proj("+proj=wintri") gg <- gg + facet_wrap(~Nation) gg <- gg + theme_map() gg <- gg + theme(strip.background=element_blank()) gg <- gg + theme(legend.position="none") gg
set.seed(125) origin = rep("北京", 10) destination = c('上海', '广州', '大连', '南宁', '南昌',                 '拉萨', '长春', '包头', '重庆', '常州') dat = data.frame(origin, destination) out = remap(dat, title = "REmap实例数据", subtitle = "theme:Dark") plot(out)
set.seed(125) library(REmap) origin = rep("北京", 10) destination = c('上海', '广州', '大连', '南宁', '南昌',                 '拉萨', '长春', '包头', '重庆', '常州') dat = data.frame(origin, destination) out = remap(dat, title = "REmap实例数据", subtitle = "theme:Dark") plot(out)
library(ggplot2)  #devtools::install_github("hadley/ggplot2")  library(dplyr)     library(ggalt)    # devtools::install_github("hrbrmstr/ggalt") library(ggthemes) # theme_map and tableau colors world <- map_data("world") world <- world[world$region != "Antarctica",] # intercourse antarctica dat <- read.csv("CLIWOC15.csv")        # having factors here by default isn't a bad thing dat <- filter(dat, Nation != "Sweden") # I kinda feel bad for Sweden but 4 panels look better than 5 and it doesn't have much data gg <- ggplot() gg <- gg + geom_map(data=world, map=world,                     aes(x=long, y=lat, map_id=region),                     color="white", fill="#7f7f7f", size=0.05, alpha=1/4) gg <- gg + geom_point(data=dat,                        aes(x=Lon3, y=Lat3, color=Nation),                        size=0.15, alpha=1/100) gg <- gg + scale_color_tableau() gg <- gg + coord_proj("+proj=wintri") gg <- gg + facet_wrap(~Nation) gg <- gg + theme_map() gg <- gg + theme(strip.background=element_blank()) gg <- gg + theme(legend.position="none") gg
library(ggplot2)  #devtools::install_github("hadley/ggplot2")  library(dplyr)     library(ggalt)    # devtools::install_github("hrbrmstr/ggalt") library(ggthemes) # theme_map and tableau colors world <- map_data("world") world <- world[world$region != "Antarctica",] # intercourse antarctica dat <- read.csv("CLIWOC15.csv")        # having factors here by default isn't a bad thing dat <- filter(dat, Nation != "Sweden") # I kinda feel bad for Sweden but 4 panels look better than 5 and it doesn't have much data gg <- ggplot() gg <- gg + geom_map(data=world, map=world,                     aes(x=long, y=lat, map_id=region),                     color="white", fill="#7f7f7f", size=0.05, alpha=1/4) gg <- gg + geom_point(data=dat,                        aes(x=Lon3, y=Lat3, color=Nation),                        size=0.15, alpha=1/100) gg <- gg + scale_color_tableau() gg <- gg + coord_proj("+proj=wintri") gg <- gg + facet_wrap(~Nation) gg <- gg + theme_map() gg <- gg + theme(strip.background=element_blank()) gg <- gg + theme(legend.position="none") gg
library(ggplot2)  #devtools::install_github("hadley/ggplot2")  library(dplyr)     library(ggalt)    # devtools::install_github("hrbrmstr/ggalt") library(ggthemes) # theme_map and tableau colors world <- map_data("world") world <- world[world$region != "Antarctica",] # intercourse antarctica dat <- read.csv("C:\Users\allan\Documents\visual studio 2015\Projects\RMagic\RMagic\visualizations\CLIWOC15.csv")        # having factors here by default isn't a bad thing dat <- filter(dat, Nation != "Sweden") # I kinda feel bad for Sweden but 4 panels look better than 5 and it doesn't have much data gg <- ggplot() gg <- gg + geom_map(data=world, map=world,                     aes(x=long, y=lat, map_id=region),                     color="white", fill="#7f7f7f", size=0.05, alpha=1/4) gg <- gg + geom_point(data=dat,                        aes(x=Lon3, y=Lat3, color=Nation),                        size=0.15, alpha=1/100) gg <- gg + scale_color_tableau() gg <- gg + coord_proj("+proj=wintri") gg <- gg + facet_wrap(~Nation) gg <- gg + theme_map() gg <- gg + theme(strip.background=element_blank()) gg <- gg + theme(legend.position="none") gg
library(ggplot2)  #devtools::install_github("hadley/ggplot2")  library(dplyr)     library(ggalt)    # devtools::install_github("hrbrmstr/ggalt") library(ggthemes) # theme_map and tableau colors world <- map_data("world") world <- world[world$region != "Antarctica",] # intercourse antarctica dat <- read.csv("C:\Users\allan\Documents\visual studio 2015\Projects\RMagic\RMagic\visualizations\CLIWOC15.csv")        # having factors here by default isn't a bad thing dat <- filter(dat, Nation != "Sweden") # I kinda feel bad for Sweden but 4 panels look better than 5 and it doesn't have much data gg <- ggplot() gg <- gg + geom_map(data=world, map=world,                     aes(x=long, y=lat, map_id=region),                     color="white", fill="#7f7f7f", size=0.05, alpha=1/4) gg <- gg + geom_point(data=dat,                        aes(x=Lon3, y=Lat3, color=Nation),                        size=0.15, alpha=1/100) gg <- gg + scale_color_tableau() gg <- gg + coord_proj("+proj=wintri") gg <- gg + facet_wrap(~Nation) gg <- gg + theme_map() gg <- gg + theme(strip.background=element_blank()) gg <- gg + theme(legend.position="none") gg
library(ggplot2)  #devtools::install_github("hadley/ggplot2")  library(dplyr)     library(ggalt)    # devtools::install_github("hrbrmstr/ggalt") library(ggthemes) # theme_map and tableau colors world <- map_data("world") world <- world[world$region != "Antarctica",] # intercourse antarctica dat <- read.csv("C:\\Users\\allan\\Documents\\visual studio 2015\\Projects\\RMagic\\RMagic\\visualizations\\CLIWOC15.csv")        # having factors here by default isn't a bad thing dat <- filter(dat, Nation != "Sweden") # I kinda feel bad for Sweden but 4 panels look better than 5 and it doesn't have much data gg <- ggplot() gg <- gg + geom_map(data=world, map=world,                     aes(x=long, y=lat, map_id=region),                     color="white", fill="#7f7f7f", size=0.05, alpha=1/4) gg <- gg + geom_point(data=dat,                        aes(x=Lon3, y=Lat3, color=Nation),                        size=0.15, alpha=1/100) gg <- gg + scale_color_tableau() gg <- gg + coord_proj("+proj=wintri") gg <- gg + facet_wrap(~Nation) gg <- gg + theme_map() gg <- gg + theme(strip.background=element_blank()) gg <- gg + theme(legend.position="none") gg
library(ggplot2)  #devtools::install_github("hadley/ggplot2")  library(dplyr)     library(ggalt)    # devtools::install_github("hrbrmstr/ggalt") library(ggthemes) # theme_map and tableau colors world <- map_data("world") world <- world[world$region != "Antarctica",] # intercourse antarctica dat <- read.csv("C:\\Users\\allan\\Documents\\visual studio 2015\\Projects\\RMagic\\RMagic\\visualizations\\CLIWOC15.csv")        # having factors here by default isn't a bad thing dat <- filter(dat, Nation != "Sweden") # I kinda feel bad for Sweden but 4 panels look better than 5 and it doesn't have much data gg <- ggplot() gg <- gg + geom_map(data=world, map=world,                     aes(x=long, y=lat, map_id=region),                     color="white", fill="#7f7f7f", size=0.05, alpha=1/4) gg <- gg + geom_point(data=dat,                        aes(x=Lon3, y=Lat3, color=Nation),                        size=0.15, alpha=1/100) gg <- gg + scale_color_tableau() gg <- gg + coord_proj("+proj=wintri") gg <- gg + facet_wrap(~Nation) gg <- gg + theme_map() gg <- gg + theme(strip.background=element_blank()) gg <- gg + theme(legend.position="none") gg
shiny::runApp()
 library(shiny) runApp(system.file('shiny', package = 'knitr'))
shiny::runApp()
library(shiny) runApp(system.file('shiny', package = 'knitr'))
library(slidify) author('mydeck')
slidify('SlidifyDemo.Rmd')
slidify('SlidifyDemo.md')
slidify('SlidifyDemo.md')
library(ggplot2)  #devtools::install_github("hadley/ggplot2")  library(dplyr)     library(ggalt)    # devtools::install_github("hrbrmstr/ggalt") library(ggthemes) # theme_map and tableau colors world <- map_data("world") world <- world[world$region != "Antarctica",] # intercourse antarctica dat <- read.csv("C:\Users\allan\Documents\visual studio 2015\Projects\RMagic\RMagic\visualizations\CLIWOC15.csv")        # having factors here by default isn't a bad thing dat <- filter(dat, Nation != "Sweden") # I kinda feel bad for Sweden but 4 panels look better than 5 and it doesn't have much data gg <- ggplot() gg <- gg + geom_map(data=world, map=world,                     aes(x=long, y=lat, map_id=region),                     color="white", fill="#7f7f7f", size=0.05, alpha=1/4) gg <- gg + geom_point(data=dat,                        aes(x=Lon3, y=Lat3, color=Nation),                        size=0.15, alpha=1/100) gg <- gg + scale_color_tableau() gg <- gg + coord_proj("+proj=wintri") gg <- gg + facet_wrap(~Nation) gg <- gg + theme_map() gg <- gg + theme(strip.background=element_blank()) gg <- gg + theme(legend.position="none") gg
library(ggplot2)  #devtools::install_github("hadley/ggplot2")  library(dplyr)     library(ggalt)    # devtools::install_github("hrbrmstr/ggalt") library(ggthemes) # theme_map and tableau colors world <- map_data("world") world <- world[world$region != "Antarctica",] # intercourse antarctica dat <- read.csv("C:\Users\allan\Documents\visual studio 2015\Projects\RMagic\RMagic\visualizations\CLIWOC15.csv")        # having factors here by default isn't a bad thing dat <- filter(dat, Nation != "Sweden") # I kinda feel bad for Sweden but 4 panels look better than 5 and it doesn't have much data gg <- ggplot() gg <- gg + geom_map(data=world, map=world,                     aes(x=long, y=lat, map_id=region),                     color="white", fill="#7f7f7f", size=0.05, alpha=1/4) gg <- gg + geom_point(data=dat,                        aes(x=Lon3, y=Lat3, color=Nation),                        size=0.15, alpha=1/100) gg <- gg + scale_color_tableau() gg <- gg + coord_proj("+proj=wintri") gg <- gg + facet_wrap(~Nation) gg <- gg + theme_map() gg <- gg + theme(strip.background=element_blank()) gg <- gg + theme(legend.position="none") gg
set.seed(125) library(REmap) origin = rep("北京", 10) destination = c('上海', '广州', '大连', '南宁', '南昌',                 '拉萨', '长春', '包头', '重庆', '常州') dat = data.frame(origin, destination) out = remap(dat, title = "REmap实例数据", subtitle = "theme:Dark") plot(out)
library(ggplot2)  #devtools::install_github("hadley/ggplot2")  library(dplyr)     library(ggalt)    # devtools::install_github("hrbrmstr/ggalt") library(ggthemes) # theme_map and tableau colors
install_github("hrbrmstr/ggalt")
 library(shiny) runApp(system.file('shiny', package = 'knitr')) library(slidify) author('mydeck') slidify('SlidifyDemo.md')
library(shiny) runApp(system.file('shiny', package = 'knitr'))
library(slidify) author('mydeck') slidify('SlidifyDemo.md')
install.packages("slidify")
require(devtools) install_github("slidify", "ramnathv") install_github("slidifyLibraries", "ramnathv")require(devtools) install_github("slidify", "ramnathv") install_github("slidifyLibraries", "ramnathv")
library("slidify")
library(slidify) author('mydeck') slidify('SlidifyDemo.md')
?author
slidify('SlidifyDemo.md')
slidify('SlidifyDemo.Rmd')
install.packages("REmap")
search()
search(devtools)
?devtools
install.packages("devtools")
library("slidify")
author("slidify-demo")
author("slidify-demo")
author("slidify-demo1")
getwd()
ls
ls()
rm("slidify-demo1")
cd ..
getwd()
getwd()
setwd("C:/Users/Administrator/Documents/Sample Files/SQLPASS_201606/RMagic/RMagic")
getwd()
author("slidify-demo")
getwd()
slidify("index.Rmd")
getwd()
cd ..
